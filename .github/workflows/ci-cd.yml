# name: CI/CD Pipeline for Microservices

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'
#           cache: 'npm'

#       - name: Pull MongoDB image
#         run: docker pull mongo:7.0

#       - name: Start MongoDB container
#         run: |
#           docker run -d --name ci-mongodb -p 27017:27017 mongo:7.0 --noauth  # No auth for CI test

#       - name: Wait for MongoDB ready
#         run: |
#           for i in {1..60}; do
#             if nc -z localhost 27017; then
#               echo "MongoDB port open!"
#               # Check command
#               if mongo --host localhost --port 27017 --eval "db.adminCommand('ismaster')" > /dev/null 2>&1; then
#                 echo "MongoDB ready!"
#                 break
#               fi
#             fi
#             echo "Waiting for MongoDB... ($i/60)"
#             sleep 3
#           done
#           if ! nc -z localhost 27017; then
#             echo "MongoDB not ready"
#             docker logs ci-mongodb
#             exit 1
#           fi

#       - name: Create .env for Auth
#         run: |
#           echo "MONGODB_AUTH_URI=mongodb://localhost:27017/ThaianAuthService" > auth/.env
#           echo "JWT_SECRET=thaiansecret" >> auth/.env

#       - name: Install dependencies for Auth
#         run: cd auth && npm ci

#       - name: Run tests for Auth
#         run: cd auth && npm test

#       - name: Create .env for Product
#         run: |
#           echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/ThaianProductService" > product/.env
#           echo "JWT_SECRET=thaiansecret" >> product/.env

#       - name: Install dependencies for Product
#         run: cd product && npm ci

#       - name: Run tests for Product
#         run: cd product && npm test

#       - name: Create .env for Order
#         run: |
#           echo "MONGODB_ORDER_URI=mongodb://localhost:27017/ThaianOrderService" > order/.env
#           echo "JWT_SECRET=thaiansecret" >> order/.env

#       - name: Install dependencies for Order
#         run: cd order && npm ci

#       - name: Run tests for Order
#         run: cd order && npm test

#       - name: Lint code
#         run: |
#           npm install -g eslint
#           eslint . --ext .js --ignore-path .gitignore

#       - name: Cleanup MongoDB container
#         if: always()  # Luôn chạy, dù pass/fail
#         run: docker stop ci-mongodb && docker rm ci-mongodb

#   build-docker:
#     needs: test
#     runs-on: windows-latest
#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Auth image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./auth
#           push: true
#           tags: thaian/microservices-auth:latest

#       - name: Build and push Product image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./product
#           push: true
#           tags: thaian/microservices-product:latest

#       - name: Build and push Order image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./order
#           push: true
#           tags: thaian/microservices-order:latest

#       - name: Build and push Gateway image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./api-gateway
#           push: true
#           tags: thaian/microservices-gateway:latest




# mong la dc

# name: CI/CD Pipeline for Microservices

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'
#           cache: 'npm'

#       # --- 1. Khởi động MongoDB ---
#       - name: Pull MongoDB image
#         run: docker pull mongo:7.0

#       - name: Start MongoDB container
#         run: |
#           docker run -d --name ci-mongodb -p 27017:27017 mongo:7.0 --noauth

#       - name: Wait for MongoDB ready
#         run: |
#           echo "Waiting for MongoDB..."
#           for i in {1..30}; do
#             if nc -z localhost 27017; then 
#               echo "MongoDB port open!"
#               # Sử dụng --eval "db.adminCommand('ping')" cho các phiên bản mongo mới hơn
#               if docker exec ci-mongodb mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
#                 echo "MongoDB ready!"
#                 break
#               fi
#             fi
#             echo "Waiting for MongoDB... ($i/30)"
#             sleep 2
#           done
#           if ! nc -z localhost 27017; then 
#             echo "MongoDB not ready"
#             docker logs ci-mongodb
#             exit 1
#           fi

#       # --- 2. Khởi động RabbitMQ (BƯỚC BỊ THIẾU) ---
#       - name: Pull RabbitMQ image
#         run: docker pull rabbitmq:3-management-alpine

#       - name: Start RabbitMQ container
#         run: |
#           docker run -d --name ci-rabbitmq -p 5672:5672 -p 15672:15672 \
#             -e RABBITMQ_DEFAULT_USER=guest \
#             -e RABBITMQ_DEFAULT_PASS=guest \
#             rabbitmq:3-management-alpine

#       - name: Wait for RabbitMQ ready
#         run: |
#           echo "Waiting for RabbitMQ..."
#           for i in {1..30}; do
#             if nc -z localhost 5672; then
#               echo "RabbitMQ port 5672 open!"
#               break
#             fi
#             echo "Waiting for RabbitMQ... ($i/30)"
#             sleep 2
#           done
#           if ! nc -z localhost 5672; then
#             echo "RabbitMQ not ready"
#             docker logs ci-rabbitmq
#             exit 1
#           fi

#       # --- 3. Test Service Auth ---
#       - name: Create .env for Auth
#         run: |
#           echo "MONGODB_AUTH_URI=mongodb://localhost:27017/ThaianAuthService" > auth/.env
#           echo "JWT_SECRET=thaiansecret" >> auth/.env
#           # Thêm RabbitMQ nếu Auth Service của bạn cần
#           echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> auth/.env

#       - name: Install dependencies for Auth
#         run: cd auth && npm ci

#       - name: Run tests for Auth
#         run: cd auth && npm test

#       # --- 4. Chạy Auth Service trong nền (BƯỚC BỊ THIẾU) ---
#       - name: Run Auth service in background
#         run: cd auth && npm start &

#       - name: Wait for Auth service
#         run: |
#           echo "Waiting for Auth service..."
#           for i in {1..30}; do
#             if nc -z localhost 3000; then
#               echo "Auth service (port 3000) is ready!"
#               break
#             fi
#             echo "Waiting for Auth service... ($i/30)"
#             sleep 2
#           done
#           if ! nc -z localhost 3000; then
#             echo "Auth service timed out"
#             exit 1
#           fi

#       # --- 5. Test Service Product (ĐÃ SỬA .ENV) ---
#       - name: Create .env for Product
#         run: |
#           echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/ThaianProductService" > product/.env
#           echo "JWT_SECRET=thaiansecret" >> product/.env
#           echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> product/.env
#           echo "LOGIN_TEST_USER=thaian9" >> product/.env
#           echo "LOGIN_TEST_PASSWORD=password123" >> product/.env
#           echo "AUTH_SERVICE_URL=http://localhost:3000" >> product/.env

#       - name: Install dependencies for Product
#         run: cd product && npm ci

#       - name: Run tests for Product
#         run: cd product && npm test

#       # --- 6. Test Service Order (ĐÃ SỬA .ENV) ---
#       - name: Create .env for Order
#         run: |
#           echo "MONGODB_ORDER_URI=mongodb://localhost:27017/ThaianOrderService" > order/.env
#           echo "JWT_SECRET=thaiansecret" >> order/.env
#           echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> order/.env
#           # Thêm các biến .env khác nếu Order cần test (ví dụ: LOGIN_TEST_USER)

#       - name: Install dependencies for Order
#         run: cd order && npm ci

#       - name: Run tests for Order
#         run: cd order && npm test

#       # --- 7. Linting ---
#       - name: Lint code
#         run: |
#           # Cài đặt phiên bản 8 của ESLint để tương thích với file .eslintrc.js
#           npm install -g eslint@8
#           eslint . --ext .js

#       # --- 8. Dọn dẹp (THÊM DỌN DẸP RABBITMQ) ---
#       - name: Cleanup MongoDB container
#         if: always() # Luôn chạy, dù pass/fail
#         run: docker stop ci-mongodb && docker rm ci-mongodb

#       - name: Cleanup RabbitMQ container
#         if: always() # Luôn chạy, dù pass/fail
#         run: docker stop ci-rabbitmq && docker rm ci-rabbitmq

#   # --- Job Build-Docker (Không cần sửa) ----
#   build-docker:
#     needs: test
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Auth image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./auth
#           push: true
#           tags: thaianlqd050204/microservices-auth:latest

#       - name: Build and push Product image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./product
#           push: true
#           tags: thaianlqd050204/microservices-product:latest

#       - name: Build and push Order image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./order
#           push: true
#           tags: thaianlqd050204/microservices-order:latest

#       - name: Build and push Gateway image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./api-gateway
#           push: true
#           tags: thaianlqd050204/microservices-gateway:latest





##test ạ:
name: CI/CD Pipeline for Microservices

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # --- 1. Khởi động các dịch vụ nền tảng ---
      - name: Start MongoDB and RabbitMQ containers
        run: |
          docker run -d --name ci-mongodb -p 27017:27017 mongo:7.0 --noauth
          docker run -d --name ci-rabbitmq -p 5672:5672 -p 15672:15672 \
            -e RABBITMQ_DEFAULT_USER=guest -e RABBITMQ_DEFAULT_PASS=guest \
            rabbitmq:3-management-alpine

      - name: Wait for services to be ready
        run: |
          echo "Waiting for MongoDB..."
          for i in {1..30}; do if nc -z localhost 27017; then echo "MongoDB ready!"; break; fi; sleep 2; done
          if ! nc -z localhost 27017; then echo "MongoDB timed out"; exit 1; fi
          
          echo "Waiting for RabbitMQ..."
          for i in {1..30}; do if nc -z localhost 5672; then echo "RabbitMQ ready!"; break; fi; sleep 2; done
          if ! nc -z localhost 5672; then echo "RabbitMQ timed out"; exit 1; fi

      # --- 2. Cài đặt và Test các service phụ thuộc ---
      - name: Setup Auth Service
        run: |
          echo "MONGODB_AUTH_URI=mongodb://localhost:27017/ThaianAuthService" > auth/.env
          echo "JWT_SECRET=thaiansecret" >> auth/.env
          echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> auth/.env
          cd auth && npm ci && npm test
      
      - name: Setup Order Service
        run: |
          echo "MONGODB_ORDER_URI=mongodb://localhost:27017/ThaianOrderService" > order/.env
          echo "JWT_SECRET=thaiansecret" >> order/.env
          echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> order/.env
          cd order && npm ci && npm test
      
      # --- 3. Khởi động các service trong nền và GHI LẠI LOG ---
      - name: Run Auth service in background
        run: cd auth && npm start > auth.log 2>&1 &
        
      - name: Run Order service in background
        run: cd order && npm start > order.log 2>&1 &

      - name: Wait for background services to initialize
        run: |
          echo "Waiting for Auth service..."
          for i in {1..30}; do if nc -z localhost 3000; then echo "Auth service ready!"; break; fi; sleep 2; done
          if ! nc -z localhost 3000; then echo "Auth service timed out"; cat auth.log; exit 1; fi
          echo "Giving Order service time to connect to RabbitMQ..."
          sleep 10
      
      # --- 4. Bây giờ mới Test service chính (Product) ---
      - name: Setup and Test Product Service
        run: |
          echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/ThaianProductService" > product/.env
          echo "JWT_SECRET=thaiansecret" >> product/.env
          echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> product/.env
          echo "LOGIN_TEST_USER=thaian9" >> product/.env
          echo "LOGIN_TEST_PASSWORD=password123" >> product/.env
          echo "AUTH_SERVICE_URL=http://localhost:3000" >> product/.env
          cd product && npm ci && npm test

      # --- 5. BƯỚC DEBUG: Luôn hiển thị log của các service chạy nền ---
      - name: Display background service logs
        if: always() # Luôn chạy, dù các bước trước thành công hay thất bại
        run: |
          echo "--- Displaying logs from background services ---"
          echo "--- Auth Service Log (auth.log) ---"
          cat auth.log || echo "auth.log not found."
          echo "--- Order Service Log (order.log) ---"
          cat order.log || echo "order.log not found."

      # --- 6. Linting và Dọn dẹp ---
      - name: Lint code
        run: |
          npm install -g eslint@8
          eslint . --ext .js

      - name: Cleanup Docker containers
        if: always()
        run: |
          docker stop ci-mongodb ci-rabbitmq || true
          docker rm ci-mongodb ci-rabbitmq || true

  # --- Job Build-Docker ---
  build-docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Auth image
        uses: docker/build-push-action@v5
        with:
          context: ./auth
          push: true
          tags: thaianlqd050204/microservices-auth:latest
      - name: Build and push Product image
        uses: docker/build-push-action@v5
        with:
          context: ./product
          push: true
          tags: thaianlqd050204/microservices-product:latest
      - name: Build and push Order image
        uses: docker/build-push-action@v5
        with:
          context: ./order
          push: true
          tags: thaianlqd050204/microservices-order:latest
      - name: Build and push Gateway image
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          push: true
          tags: thaianlqd050204/microservices-gateway:latest






