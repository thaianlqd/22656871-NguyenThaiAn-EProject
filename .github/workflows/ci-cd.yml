##=> thai an - test lan 1 : 
# name: CI/CD Pipeline for Microservices

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'
#           cache: 'npm'

#       - name: Pull MongoDB image
#         run: docker pull mongo:7.0

#       - name: Start MongoDB container
#         run: |
#           docker run -d --name ci-mongodb -p 27017:27017 mongo:7.0 --noauth  # No auth for CI test

#       - name: Wait for MongoDB ready
#         run: |
#           for i in {1..60}; do
#             if nc -z localhost 27017; then
#               echo "MongoDB port open!"
#               # Check command
#               if mongo --host localhost --port 27017 --eval "db.adminCommand('ismaster')" > /dev/null 2>&1; then
#                 echo "MongoDB ready!"
#                 break
#               fi
#             fi
#             echo "Waiting for MongoDB... ($i/60)"
#             sleep 3
#           done
#           if ! nc -z localhost 27017; then
#             echo "MongoDB not ready"
#             docker logs ci-mongodb
#             exit 1
#           fi

#       - name: Create .env for Auth
#         run: |
#           echo "MONGODB_AUTH_URI=mongodb://localhost:27017/ThaianAuthService" > auth/.env
#           echo "JWT_SECRET=thaiansecret" >> auth/.env

#       - name: Install dependencies for Auth
#         run: cd auth && npm ci

#       - name: Run tests for Auth
#         run: cd auth && npm test

#       - name: Create .env for Product
#         run: |
#           echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/ThaianProductService" > product/.env
#           echo "JWT_SECRET=thaiansecret" >> product/.env

#       - name: Install dependencies for Product
#         run: cd product && npm ci

#       - name: Run tests for Product
#         run: cd product && npm test

#       - name: Create .env for Order
#         run: |
#           echo "MONGODB_ORDER_URI=mongodb://localhost:27017/ThaianOrderService" > order/.env
#           echo "JWT_SECRET=thaiansecret" >> order/.env

#       - name: Install dependencies for Order
#         run: cd order && npm ci

#       - name: Run tests for Order
#         run: cd order && npm test

#       - name: Lint code
#         run: |
#           npm install -g eslint
#           eslint . --ext .js --ignore-path .gitignore

#       - name: Cleanup MongoDB container
#         if: always()  # Luôn chạy, dù pass/fail
#         run: docker stop ci-mongodb && docker rm ci-mongodb

#   build-docker:
#     needs: test
#     runs-on: windows-latest
#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Auth image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./auth
#           push: true
#           tags: thaian/microservices-auth:latest

#       - name: Build and push Product image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./product
#           push: true
#           tags: thaian/microservices-product:latest

#       - name: Build and push Order image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./order
#           push: true
#           tags: thaian/microservices-order:latest

#       - name: Build and push Gateway image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./api-gateway
#           push: true
#           tags: thaian/microservices-gateway:latest


##=> thai an - test lan 2: 

# name: CI/CD Pipeline for Microservices

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'
#           cache: 'npm'

#       # --- 1. Khởi động MongoDB ---
#       - name: Pull MongoDB image
#         run: docker pull mongo:7.0

#       - name: Start MongoDB container
#         run: |
#           docker run -d --name ci-mongodb -p 27017:27017 mongo:7.0 --noauth

#       - name: Wait for MongoDB ready
#         run: |
#           echo "Waiting for MongoDB..."
#           for i in {1..30}; do
#             if nc -z localhost 27017; then 
#               echo "MongoDB port open!"
#               # Sử dụng --eval "db.adminCommand('ping')" cho các phiên bản mongo mới hơn
#               if docker exec ci-mongodb mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
#                 echo "MongoDB ready!"
#                 break
#               fi
#             fi
#             echo "Waiting for MongoDB... ($i/30)"
#             sleep 2
#           done
#           if ! nc -z localhost 27017; then 
#             echo "MongoDB not ready"
#             docker logs ci-mongodb
#             exit 1
#           fi

#       # --- 2. Khởi động RabbitMQ (BƯỚC BỊ THIẾU) ---
#       - name: Pull RabbitMQ image
#         run: docker pull rabbitmq:3-management-alpine

#       - name: Start RabbitMQ container
#         run: |
#           docker run -d --name ci-rabbitmq -p 5672:5672 -p 15672:15672 \
#             -e RABBITMQ_DEFAULT_USER=guest \
#             -e RABBITMQ_DEFAULT_PASS=guest \
#             rabbitmq:3-management-alpine

#       - name: Wait for RabbitMQ ready
#         run: |
#           echo "Waiting for RabbitMQ..."
#           for i in {1..30}; do
#             if nc -z localhost 5672; then
#               echo "RabbitMQ port 5672 open!"
#               break
#             fi
#             echo "Waiting for RabbitMQ... ($i/30)"
#             sleep 2
#           done
#           if ! nc -z localhost 5672; then
#             echo "RabbitMQ not ready"
#             docker logs ci-rabbitmq
#             exit 1
#           fi

#       # --- 3. Test Service Auth ---
#       - name: Create .env for Auth
#         run: |
#           echo "MONGODB_AUTH_URI=mongodb://localhost:27017/ThaianAuthService" > auth/.env
#           echo "JWT_SECRET=thaiansecret" >> auth/.env
#           # Thêm RabbitMQ nếu Auth Service của bạn cần
#           echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> auth/.env

#       - name: Install dependencies for Auth
#         run: cd auth && npm ci

#       - name: Run tests for Auth
#         run: cd auth && npm test

#       # --- 4. Chạy Auth Service trong nền (BƯỚC BỊ THIẾU) ---
#       - name: Run Auth service in background
#         run: cd auth && npm start &

#       - name: Wait for Auth service
#         run: |
#           echo "Waiting for Auth service..."
#           for i in {1..30}; do
#             if nc -z localhost 3000; then
#               echo "Auth service (port 3000) is ready!"
#               break
#             fi
#             echo "Waiting for Auth service... ($i/30)"
#             sleep 2
#           done
#           if ! nc -z localhost 3000; then
#             echo "Auth service timed out"
#             exit 1
#           fi

#       # --- 5. Test Service Product (ĐÃ SỬA .ENV) ---
#       - name: Create .env for Product
#         run: |
#           echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/ThaianProductService" > product/.env
#           echo "JWT_SECRET=thaiansecret" >> product/.env
#           echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> product/.env
#           echo "LOGIN_TEST_USER=thaian9" >> product/.env
#           echo "LOGIN_TEST_PASSWORD=password123" >> product/.env
#           echo "AUTH_SERVICE_URL=http://localhost:3000" >> product/.env

#       - name: Install dependencies for Product
#         run: cd product && npm ci

#       - name: Run tests for Product
#         run: cd product && npm test

#       # --- 6. Test Service Order (ĐÃ SỬA .ENV) ---
#       - name: Create .env for Order
#         run: |
#           echo "MONGODB_ORDER_URI=mongodb://localhost:27017/ThaianOrderService" > order/.env
#           echo "JWT_SECRET=thaiansecret" >> order/.env
#           echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> order/.env
#           # Thêm các biến .env khác nếu Order cần test (ví dụ: LOGIN_TEST_USER)

#       - name: Install dependencies for Order
#         run: cd order && npm ci

#       - name: Run tests for Order
#         run: cd order && npm test

#       # --- 7. Linting ---
#       - name: Lint code
#         run: |
#           # Cài đặt phiên bản 8 của ESLint để tương thích với file .eslintrc.js
#           npm install -g eslint@8
#           eslint . --ext .js

#       # --- 8. Dọn dẹp (THÊM DỌN DẸP RABBITMQ) ---
#       - name: Cleanup MongoDB container
#         if: always() # Luôn chạy, dù pass/fail
#         run: docker stop ci-mongodb && docker rm ci-mongodb

#       - name: Cleanup RabbitMQ container
#         if: always() # Luôn chạy, dù pass/fail
#         run: docker stop ci-rabbitmq && docker rm ci-rabbitmq

#   # --- Job Build-Docker (Không cần sửa) ----
#   build-docker:
#     needs: test
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Auth image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./auth
#           push: true
#           tags: thaianlqd050204/microservices-auth:latest

#       - name: Build and push Product image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./product
#           push: true
#           tags: thaianlqd050204/microservices-product:latest

#       - name: Build and push Order image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./order
#           push: true
#           tags: thaianlqd050204/microservices-order:latest

#       - name: Build and push Gateway image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./api-gateway
#           push: true
#           tags: thaianlqd050204/microservices-gateway:latest


##=> thai an - update:
# name: CI/CD Pipeline for Microservices

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     services:
#       mongodb:
#         image: mongo:7.0
#         ports:
#           - 27017:27017
#       rabbitmq:
#         image: rabbitmq:3-management-alpine
#         ports:
#           - 5672:5672

#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'
#           cache: 'npm'
          
#       - name: Wait for Dependencies to be Ready
#         run: |
#           echo "Waiting for dependencies..."
#           npm install -g wait-on
#           wait-on tcp:27017 tcp:5672 -t 30000

#       - name: Install All Dependencies
#         run: |
#           cd auth && npm install && cd ..
#           cd product && npm install && cd ..
#           cd order && npm install && cd ..
          
#       - name: Create .env files
#         run: |
#           echo "MONGODB_AUTH_URI=mongodb://localhost:27017/ci_auth" > auth/.env
#           echo "JWT_SECRET=ci_secret" >> auth/.env
#           echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> auth/.env

#           echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/ci_product" > product/.env
#           echo "JWT_SECRET=ci_secret" >> product/.env
#           echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> product/.env
#           echo "LOGIN_TEST_USER=ci_user" >> product/.env
#           echo "LOGIN_TEST_PASSWORD=ci_password" >> product/.env
#           echo "AUTH_SERVICE_URL=http://localhost:3000" >> product/.env
          
#           echo "MONGODB_ORDER_URI=mongodb://localhost:27017/ci_order" > order/.env
#           echo "JWT_SECRET=ci_secret" >> order/.env
#           echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> order/.env

#       # --- PHIÊN BẢN SỬA LỖI CUỐI CÙNG ---
#       - name: Run Background Services and Wait
#         run: |
#           echo "Starting Auth service in background..."
#           cd auth && nohup npm start > nohup.out 2>&1 &
          
#           echo "Starting Order service in background..."
#           cd order && nohup npm start > nohup.out 2>&1 &
          
#           echo "Waiting for Auth service to respond..."
#           for i in {1..30}; do
#             # SỬA LỖI: Dùng -sS, bỏ _ và f. Chuyển stdout sang /dev/null
#             # Lệnh này sẽ thành công miễn là server trả về bất kỳ phản hồi HTTP nào (kể cả 400).
#             if curl -sS --max-time 1 http://localhost:3000/login -X POST > /dev/null 2>&1; then
#               echo "Auth service is responding!"
#               exit 0
#             fi
#             echo "Attempt $i/30: Auth service not yet responsive. Retrying in 2 seconds..."
#             sleep 2
#           done
          
#           echo "::error::Auth service failed to start in time."
#           echo "--- Last 20 lines of Auth service log ---"
#           tail -n 20 auth/nohup.out || echo "auth/nohup.out not found."
#           exit 1

#       # --- Chạy Tests ---
#       - name: Run Tests (Auth, Product, Order)
#         run: |
#           cd auth && npm test
#           cd ../product && npm test
#           cd ../order && npm test

#   build-docker:
#     needs: test
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#       - name: Build and Push Images
#         run: |
#           docker build -t thaianlqd050204/microservices-auth:latest --push ./auth
#           docker build -t thaianlqd050204/microservices-product:latest --push ./product
#           docker build -t thaianlqd050204/microservices-order:latest --push ./order
#           docker build -t thaianlqd050204/microservices-gateway:latest --push ./api-gateway



#=> thai an - update: Tối ưu tốc độ
name: CI/CD Pipeline for Microservices

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    # Sử dụng 'services' để GitHub Actions tự quản lý và chờ DB/MQ
    services:
      mongodb:
        image: mongo:7.0
        ports: ['27017:27017']
        # Healthcheck để đảm bảo MongoDB sẵn sàng trước khi các bước khác chạy
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq:3-management-alpine
        ports: ['5672:5672', '15672:15672']
        env: # Cung cấp env vars trực tiếp cho service
            RABBITMQ_DEFAULT_USER: guest
            RABBITMQ_DEFAULT_PASS: guest
        # Healthcheck cho RabbitMQ
        options: >-
          --health-cmd "rabbitmq-diagnostics check_port_connectivity || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          # Cache dependencies dựa trên package-lock.json của từng service
          cache-dependency-path: |
            **/package-lock.json
            
      # TỐI ƯU: Không cần 'wait-on tcp:' nữa vì 'services' đã lo việc chờ đợi

      # TỐI ƯU: Cài đặt dependencies song song bằng npm ci (nhanh hơn install)
      - name: Install All Dependencies in Parallel
        run: |
          npm --prefix auth ci & \
          npm --prefix product ci & \
          npm --prefix order ci & \
          wait # Chờ tất cả cài đặt xong

      - name: Create .env files
        run: |
          echo "MONGODB_AUTH_URI=mongodb://localhost:27017/ci_auth" > auth/.env
          echo "JWT_SECRET=ci_secret" >> auth/.env
          echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> auth/.env

          echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/ci_product" > product/.env
          echo "JWT_SECRET=ci_secret" >> product/.env
          echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> product/.env
          echo "LOGIN_TEST_USER=ci_user" >> product/.env
          echo "LOGIN_TEST_PASSWORD=ci_password" >> product/.env
          echo "AUTH_SERVICE_URL=http://localhost:3000" >> product/.env
          
          echo "MONGODB_ORDER_URI=mongodb://localhost:27017/ci_order" > order/.env
          echo "JWT_SECRET=ci_secret" >> order/.env
          echo "RABBITMQ_URI=amqp://guest:guest@localhost:5672" >> order/.env

      # Khởi động các service trong nền
      - name: Run Background Services
        run: |
          echo "Starting Auth service in background..."
          cd auth && nohup npm start > nohup.out 2>&1 &
          AUTH_PID=$!
          
          echo "Starting Order service in background..."
          cd order && nohup npm start > nohup.out 2>&1 &
          ORDER_PID=$!

          # Lưu PID vào biến môi trường để kiểm tra sau
          echo "AUTH_PID=$AUTH_PID" >> $GITHUB_ENV
          echo "ORDER_PID=$ORDER_PID" >> $GITHUB_ENV

          echo "Waiting for Auth service to respond..."
          # Dùng wait-on thay vì curl loop, timeout 30s
          npm install -g wait-on 
          wait-on http://localhost:3000 -t 30000 || (echo "Auth service timed out!" && cat auth/nohup.out && exit 1)

          echo "Giving Order service time to connect..."
          sleep 5 # Giảm thời gian chờ Order service

      # Chạy Tests tuần tự (vì product test phụ thuộc auth/order chạy)
      - name: Run Tests
        run: |
          echo "Running Auth tests..."
          (cd auth && npm test) || (echo "::error::Auth tests failed!" && cat auth/nohup.out && exit 1)
          
          # Kiểm tra lại service Order trước khi chạy test Product
          echo "Checking if Order service (PID ${ORDER_PID}) is still running..."
          if ! kill -0 $ORDER_PID > /dev/null 2>&1; then
             echo "::error::Order service crashed before Product tests!"
             echo "--- Order Service Log ---"
             cat order/nohup.out || echo "order/nohup.out not found."
             exit 1
          fi
          
          echo "Running Product tests..."
          (cd product && npm test) || (echo "::error::Product tests failed!" && cat order/nohup.out && exit 1) # In log Order nếu Product fail
          
          echo "Running Order tests..."
          (cd order && npm test) || (echo "::error::Order tests failed!" && cat order/nohup.out && exit 1)

      # Hiển thị log nếu cần debug (chỉ chạy khi có lỗi)
      - name: Display background service logs on failure
        if: failure()
        run: |
          echo "--- Auth Log ---"
          cat auth/nohup.out || echo "Not found."
          echo "--- Order Log ---"
          cat order/nohup.out || echo "Not found."

      # Linting (Chỉ chạy nếu test thành công)
      - name: Lint code
        if: success() 
        run: |
          npm install -g eslint@8
          eslint . --ext .js

  build-docker:
    needs: test
    # Chỉ build và push khi push lên nhánh main và test thành công
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # TỐI ƯU: Thêm lại setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # TỐI ƯU: Build và Push song song bằng buildx (thay vì docker build)
      - name: Build and Push Images in Parallel
        run: |
          (docker buildx build --platform linux/amd64 -t thaianlqd050204/microservices-auth:latest --push ./auth) & \
          (docker buildx build --platform linux/amd64 -t thaianlqd050204/microservices-product:latest --push ./product) & \
          (docker buildx build --platform linux/amd64 -t thaianlqd050204/microservices-order:latest --push ./order) & \
          (docker buildx build --platform linux/amd64 -t thaianlqd050204/microservices-gateway:latest --push ./api-gateway) & \
          wait # Chờ tất cả build và push xong


